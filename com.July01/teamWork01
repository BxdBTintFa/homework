/******************student类的建立************************/
public class Student {
    private int id;
	private String name;
	private String sex;
	private int age;
	private float height;

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getSex() {
		return sex;
	}

	public void setSex(String sex) {
		this.sex = sex;
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}

	public float getHeight() {
		return height;
	}

	public void setHeight(float height) {
		this.height = height;
	}
	
	public void setStudent(int id,String name,String sex,int 

age,float height){
		this.setId(id);
		this.setName(name);
		this.setSex(sex);
		this.setAge(age);
		this.setHeight(height);
	}
	
	public String toString(){
		return this.id+" "+this.name+" "+this.age+" 

"+this.sex+" "+this.height;
		
	}
}


/************************定义按照id排序的方法***********/
import java.util.Comparator;

public class SortById implements Comparator<Student> {

	@Override
	public int compare(Student arg0, Student arg1) {
		if (arg0.getId() < arg1.getId()) {
			return 1;
		} else if (arg0.getId() == arg1.getId()) {
			return 0;
		} else
			return -1;
	}

}

/*************定义按照age排序的方法*****************/
import java.util.Comparator;

public class SortByAge implements Comparator<Student> {

	@Override
	public int compare(Student arg0, Student arg1) {
		if(arg0.getAge()<arg1.getAge()){
			return 1;
		}
		else if(arg0.getAge() == arg1.getAge()){return 0;}
		else return -1;
	}
}


/************存放数据到集合，并且调用排序方法*************/
import java.util.*;

public class OrderStudeng {

	public static void main(String[] args) {
		List<Student> lStudent=new ArrayList<Student>();
			
		Student student1=new Student();
		student1.setStudent(1, "Anny", "F",63, 152);
		Student student2=new Student();
		student2.setStudent(7, "Tom", "M", 23, 162);
		Student student3=new Student();
		student3.setStudent(9, "Peter", "F", 33, 172);
		Student student4=new Student();
		student4.setStudent(2, "Andrew", "M", 53, 112);
		Student student5=new Student();
		student5.setStudent(5, "Mark", "F", 23, 142);
		
		lStudent.add(student1);
		lStudent.add(student2);
		lStudent.add(student3);
		lStudent.add(student4);
		lStudent.add(student5);
		
		System.out.println("按照id降序排序如下：");
		SortById sortById=new SortById();
		Collections.sort(lStudent,sortById);
		for(Student s:lStudent){
			System.out.println(s);
		}
		
		System.out.println("按照年龄降序排序如下：");
		SortByAge sortByAge=new SortByAge();
		Collections.sort(lStudent,sortByAge);
		for(Student s:lStudent){
			System.out.println(s);
		}
	}

}